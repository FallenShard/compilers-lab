
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Dec 16 16:28:37 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Tue Dec 16 16:28:37 CET 2014
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\003\006\000\002\002\004\000\002\003" +
    "\006\000\002\004\006\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\006\000" +
    "\002\006\006\000\002\006\004\000\002\007\005\000\002" +
    "\007\003\000\002\007\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\004\000\002\011\003\000\002\012\003\000" +
    "\002\012\006\000\002\012\006\000\002\012\005\000\002" +
    "\012\007\000\002\012\007\000\002\012\006\000\002\012" +
    "\004\000\002\012\007\000\002\012\007\000\002\012\006" +
    "\000\002\012\004\000\002\012\003\000\002\013\007\000" +
    "\002\013\006\000\002\013\004\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\003\000\002\016" +
    "\005\000\002\016\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\014\005\001\002\000\004\002\146\001" +
    "\002\000\004\005\006\001\002\000\004\007\007\001\002" +
    "\000\006\003\010\017\012\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002\000\006\003\014\006\013" +
    "\001\002\000\012\003\ufff5\007\ufff5\021\ufff5\022\ufff5\001" +
    "\002\000\016\003\ufffa\004\ufffa\006\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\001\002\000\016\003\ufffb\004\ufffb\006\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\001\002\000\016\003\044\004\036" +
    "\006\043\015\035\016\045\017\012\001\002\000\010\003" +
    "\021\021\022\022\020\001\002\000\006\003\034\006\033" +
    "\001\002\000\016\003\ufff7\004\ufff7\006\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\001\002\000\014\003\024\023\030\024\027" +
    "\025\025\026\026\001\002\000\006\003\032\011\031\001" +
    "\002\000\006\003\uffef\011\uffef\001\002\000\006\003\ufff1" +
    "\011\ufff1\001\002\000\006\003\ufff0\011\ufff0\001\002\000" +
    "\006\003\ufff2\011\ufff2\001\002\000\006\003\ufff3\011\ufff3" +
    "\001\002\000\016\003\ufff9\004\ufff9\006\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\001\002\000\016\003\ufff8\004\ufff8\006\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\001\002\000\012\003\ufff6\007" +
    "\ufff6\021\ufff6\022\ufff6\001\002\000\012\003\ufff4\007\ufff4" +
    "\021\ufff4\022\ufff4\001\002\000\006\003\137\005\140\001" +
    "\002\000\006\003\131\005\132\001\002\000\016\004\uffe0" +
    "\006\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\001\002\000" +
    "\016\004\036\006\127\015\035\016\045\017\012\020\130" +
    "\001\002\000\016\003\ufffd\004\ufffd\006\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\001\002\000\016\004\uffed\006\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\001\002\000\012\003\ufff5\010" +
    "\121\021\ufff5\022\ufff5\001\002\000\016\003\ufffc\004\ufffc" +
    "\006\ufffc\015\ufffc\016\ufffc\017\ufffc\001\002\000\006\003" +
    "\047\005\050\001\002\000\016\004\uffec\006\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\001\002\000\016\004\uffe1\006" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\001\002\000\012" +
    "\003\060\005\053\006\057\013\063\001\002\000\010\003" +
    "\114\007\115\022\113\001\002\000\036\003\uffd7\007\uffd7" +
    "\011\uffd7\012\103\022\uffd7\027\077\032\107\033\101\034" +
    "\104\035\102\036\105\037\100\040\uffd7\041\uffd7\001\002" +
    "\000\012\003\060\005\053\006\057\013\063\001\002\000" +
    "\016\003\uffdb\007\uffdb\011\uffdb\022\uffdb\040\072\041\uffdb" +
    "\001\002\000\012\003\uffc4\007\uffc4\022\uffc4\041\070\001" +
    "\002\000\042\003\uffce\007\uffce\011\uffce\012\uffce\022\uffce" +
    "\027\uffce\030\065\031\064\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\001\002\000\042" +
    "\003\uffca\007\uffca\011\uffca\012\uffca\022\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\001\002\000\042\003\uffc6\007" +
    "\uffc6\011\uffc6\012\uffc6\022\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\001\002\000\042\003\uffcb\007\uffcb\011\uffcb" +
    "\012\uffcb\022\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\001\002\000\016\003\uffd9\007\uffd9\011\uffd9\022\uffd9\040" +
    "\uffd9\041\uffd9\001\002\000\042\003\uffc9\007\uffc9\011\uffc9" +
    "\012\uffc9\022\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\001\002\000\012\003\060\005\053\006\057\013\063\001" +
    "\002\000\012\003\060\005\053\006\057\013\063\001\002" +
    "\000\042\003\uffcd\007\uffcd\011\uffcd\012\uffcd\022\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\001\002\000\042\003" +
    "\uffcc\007\uffcc\011\uffcc\012\uffcc\022\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\001\002\000\012\003\060\005\053" +
    "\006\057\013\063\001\002\000\016\003\uffdc\007\uffdc\011" +
    "\uffdc\022\uffdc\040\072\041\uffdc\001\002\000\012\003\060" +
    "\005\053\006\057\013\063\001\002\000\016\003\uffda\007" +
    "\uffda\011\uffda\022\uffda\040\uffda\041\uffda\001\002\000\010" +
    "\003\075\007\076\041\070\001\002\000\042\003\uffc7\007" +
    "\uffc7\011\uffc7\012\uffc7\022\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\001\002\000\042\003\uffc8\007\uffc8\011\uffc8" +
    "\012\uffc8\022\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\001\002\000\012\003\060\005\053\006\057\013\063\001" +
    "\002\000\012\003\uffd1\005\uffd1\006\uffd1\013\uffd1\001\002" +
    "\000\012\003\uffd5\005\uffd5\006\uffd5\013\uffd5\001\002\000" +
    "\012\003\uffd3\005\uffd3\006\uffd3\013\uffd3\001\002\000\012" +
    "\003\060\005\053\006\057\013\063\001\002\000\012\003" +
    "\uffd4\005\uffd4\006\uffd4\013\uffd4\001\002\000\012\003\uffd2" +
    "\005\uffd2\006\uffd2\013\uffd2\001\002\000\012\003\060\005" +
    "\053\006\057\013\063\001\002\000\012\003\uffd6\005\uffd6" +
    "\006\uffd6\013\uffd6\001\002\000\022\003\uffd8\007\uffd8\011" +
    "\uffd8\012\103\022\uffd8\027\077\040\uffd8\041\uffd8\001\002" +
    "\000\042\003\uffd0\007\uffd0\011\uffd0\012\uffd0\022\uffd0\027" +
    "\uffd0\030\065\031\064\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001\002\000\042\003" +
    "\uffcf\007\uffcf\011\uffcf\012\uffcf\022\uffcf\027\uffcf\030\065" +
    "\031\064\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\001\002\000\012\003\060\005\053" +
    "\006\057\013\063\001\002\000\016\004\uffe2\006\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\001\002\000\006\003\117" +
    "\011\116\001\002\000\016\004\uffe4\006\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\001\002\000\016\004\uffe3\006\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\001\002\000\012\003" +
    "\uffc5\007\uffc5\022\uffc5\041\070\001\002\000\012\003\123" +
    "\005\053\006\057\013\063\001\002\000\010\003\125\011" +
    "\124\041\070\001\002\000\052\003\uffc6\004\uffe9\006\uffe9" +
    "\011\uffc6\012\uffc6\015\uffe9\016\uffe9\017\uffe9\020\uffe9\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\001\002\000\016\004" +
    "\uffeb\006\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\001\002" +
    "\000\016\004\uffea\006\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\001\002\000\016\004\uffee\006\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\001\002\000\004\010\121\001\002\000" +
    "\020\002\ufffe\004\ufffe\006\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\001\002\000\016\004\uffdd\006\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\001\002\000\012\003\060\005\053" +
    "\006\057\013\063\001\002\000\010\003\134\007\135\041" +
    "\070\001\002\000\016\004\uffde\006\uffde\015\uffde\016\uffde" +
    "\017\uffde\020\uffde\001\002\000\014\004\036\006\127\015" +
    "\035\016\045\017\012\001\002\000\016\004\uffdf\006\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\001\002\000\016\004" +
    "\uffe5\006\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\001\002" +
    "\000\004\006\013\001\002\000\010\003\142\007\143\022" +
    "\020\001\002\000\016\004\uffe6\006\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\001\002\000\006\003\145\011\144\001" +
    "\002\000\016\004\uffe8\006\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\001\002\000\016\004\uffe7\006\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\015\006" +
    "\014\007\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\036\006\040\007\016\011" +
    "\037\012\041\013\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\036\012\125\013\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\054\015\053\016\061\020\051\021\055\022\060\023" +
    "\050\001\001\000\002\001\001\000\004\017\105\001\001" +
    "\000\016\014\073\015\053\016\061\020\051\021\055\022" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\066" +
    "\001\001\000\004\022\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\070\016\061\020\051\021\055" +
    "\022\060\001\001\000\002\001\001\000\012\016\072\020" +
    "\051\021\055\022\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\111\022\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\110\022\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\107\021\055" +
    "\022\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\117\015\053" +
    "\016\061\020\051\021\055\022\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\121\015\053\016\061\020" +
    "\051\021\055\022\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\132\015\053\016\061\020\051\021\055\022" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\036\012\135\013\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int errNo = 0;
    public static final String ERROR_LINE = "Error at line <";

    public static final String RED_OUTPUT = "\u001B[31m";
    public static final String GREEN_OUTPUT = "\u001B[32m";
    public static final String BLUE_OUTPUT = "\u001B[34m";

    public static void main(String[] args)
    {
        try
        {
            FileReader file = new FileReader(args[0]);
            Scanner scanner = new MyLexer(file);
            MyParser parser = new MyParser(scanner);
            parser.parse();

            if (parser.errNo == 0)
                System.out.println(GREEN_OUTPUT + "Parsing complete. No errors found!.");
            else
                System.out.println(RED_OUTPUT + "Parsing complete. Number of errors: " + parser.errNo);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }

    public int getLine()
    {
        return ((MyLexer)getScanner()).getLine() + 1;
    }

    public String getErrorLine()
    {
        return RED_OUTPUT + MyParser.ERROR_LINE + getLine() + ">: ";
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpressionList ::= Expression 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 39");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*ExpressionList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 38");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*ExpressionList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Factor ::= error 
            {
              Object RESULT = null;
		
			  System.out.println(parser.getErrorLine() + "Unknown factor statement");
			  parser.errNo++;
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Factor ::= LPAR Expression error 
            {
              Object RESULT = null;
		
			  System.out.println(parser.getErrorLine() + "Missing parenthesis after expression");
			  parser.errNo++;
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Factor ::= LPAR Expression RPAR 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 37");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Factor ::= CONST 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 37");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Factor ::= ID 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 36");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Term ::= Factor 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 35");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Term ::= Term FSLASH Factor 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 34");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Term ::= Term ASTER Factor 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 33");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ArExpression ::= Term 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 32");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ArExpression ::= ArExpression MINUS Term 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 31");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ArExpression ::= ArExpression PLUS Term 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 31");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelOp ::= GTE 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 30");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RelOp ::= GT 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 29");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelOp ::= NEQ 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 28");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelOp ::= EQ 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 27");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelOp ::= LTE 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 26");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RelOp ::= LT 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 25");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RelExpression ::= ArExpression 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 24");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 23");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AndExpression ::= RelExpression 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 22");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 21");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= AndExpression 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 20");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 19");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Loop ::= WHILE error 
            {
              Object RESULT = null;
		
				  System.out.println(parser.getErrorLine() + "Missing parenthesis before expression");
				  parser.errNo++;
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*Loop*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Loop ::= WHILE LPAR Expression error 
            {
              Object RESULT = null;
		
				  System.out.println(parser.getErrorLine() + "Missing parenthesis after expression");
				  parser.errNo++;
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*Loop*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Loop ::= WHILE LPAR Expression RPAR Statement 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 18");
			
              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*Loop*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= Block 
            {
              Object RESULT = null;
		
			      System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 17");
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= WRITE error 
            {
              Object RESULT = null;
		
				  System.out.println(parser.getErrorLine() + "Missing opening bracket on write");
				  parser.errNo++;
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= WRITE LPAR ExpressionList error 
            {
              Object RESULT = null;
		
				  System.out.println(parser.getErrorLine() + "Missing closing bracket on write");
				  parser.errNo++;
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= WRITE LPAR ExpressionList RPAR error 
            {
              Object RESULT = null;
		
				  System.out.println(parser.getErrorLine() + "Missing semicolon");
				  parser.errNo++;
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= WRITE LPAR ExpressionList RPAR SEMICOLON 
            {
              Object RESULT = null;
		
				  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 16");
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= READ error 
            {
              Object RESULT = null;
		
				  System.out.println(parser.getErrorLine() + "Missing opening bracket on write");
				  parser.errNo++;
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= READ LPAR NameList error 
            {
              Object RESULT = null;
		
				  System.out.println(parser.getErrorLine() + "Missing closing bracket on read");
				  parser.errNo++;
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= READ LPAR NameList RPAR error 
            {
              Object RESULT = null;
		
				  System.out.println(parser.getErrorLine() + "Missing semicolon");
				  parser.errNo++;
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= READ LPAR NameList RPAR SEMICOLON 
            {
              Object RESULT = null;
		
				  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 15");
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ID ASSIGN error 
            {
              Object RESULT = null;
		
				  System.out.println(parser.getErrorLine() + "Invalid statement");
				  parser.errNo++;
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= ID ASSIGN Expression error 
            {
              Object RESULT = null;
		
				  System.out.println(parser.getErrorLine() + "Missing semicolon at assignment");
				  parser.errNo++;
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		
				  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 14");
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= Loop 
            {
              Object RESULT = null;
		
				  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 13");
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
				  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 12");
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
				  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 11");
				
              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= error 
            {
              Object RESULT = null;
		
		  System.out.println(parser.getErrorLine() + "Invalid type declaration");
		  parser.errNo++;
		
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= BOOL 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 10");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= REAL 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 9");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= CHAR 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 8");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 7");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NameList ::= NameList COMMA error 
            {
              Object RESULT = null;
		
			  System.out.println(parser.getErrorLine() + "Missing id after comma");
			  parser.errNo++;
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NameList ::= ID 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 6");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 5");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= NameList error 
            {
              Object RESULT = null;
		
			  System.out.println(parser.getErrorLine() + "Missing colon");
			  parser.errNo++;
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= NameList COLON Type error 
            {
              Object RESULT = null;
		
			  System.out.println(parser.getErrorLine() + "Missing semicolon");
			  parser.errNo++;
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= NameList COLON Type SEMICOLON 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 3");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarList ::= error 
            {
              Object RESULT = null;
		
			  System.out.println(parser.getErrorLine() + "Invalid variable declaration");
			  parser.errNo++;
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarList ::= VarDecl 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 4");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarList ::= VarList error 
            {
              Object RESULT = null;
		
			  System.out.println(parser.getErrorLine() + "Missing variable declaration");
			  parser.errNo++;
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarList ::= VarList VarDecl 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 3");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Block ::= LBPAR VarList StatementList RBPAR 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 2");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN LPAR RPAR error 
            {
              Object RESULT = null;
		
			  System.out.println(parser.getErrorLine() + "Missing block");
			  parser.errNo++;
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LPAR RPAR Block 
            {
              Object RESULT = null;
		
			  System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 1");
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

