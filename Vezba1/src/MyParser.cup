//import section

import java_cup.runtime.*;
import java.io.*;

parser code {:

    public int errNo = 0;
    public static final String ERROR_LINE = "Error at line <";

    public static final String RED_OUTPUT = "\u001B[31m";
    public static final String GREEN_OUTPUT = "\u001B[32m";
    public static final String BLUE_OUTPUT = "\u001B[34m";

    public static void main(String[] args)
    {
        try
        {
            FileReader file = new FileReader(args[0]);
            Scanner scanner = new MyLexer(file);
            MyParser parser = new MyParser(scanner);
            parser.parse();

            if (parser.errNo == 0)
                System.out.println(GREEN_OUTPUT + "Parsing complete. No errors found!.");
            else
                System.out.println(RED_OUTPUT + "Parsing complete. Number of errors: " + parser.errNo);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }

    public int getLine()
    {
        return ((MyLexer)getScanner()).getLine() + 1;
    }

    public String getErrorLine()
    {
        return RED_OUTPUT + MyParser.ERROR_LINE + getLine() + ">: ";
    }
:};


// Terminal symbols
terminal WHILE, LPAR, ID, RPAR, ASSIGN, SEMICOLON, PLUS, CONST;

// Nonterminal symbols
non terminal WhileStatement, Statement, Assignment, Expression;




// Grammar

WhileStatement ::= WHILE LPAR ID RPAR Statement 
                   {:
                      System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 1");
                   :}
                 | WHILE LPAR ID RPAR 
                   {:
                      System.out.println(parser.getErrorLine() + "Missing statement");
                      parser.errNo++;
                   :}
                 | WHILE LPAR ID error
                   {:
                      System.out.println(parser.getErrorLine() + "Missing right parenthesis");
                      parser.errNo++;
                   :}
                 | WHILE LPAR error
                   {:
                      System.out.println(parser.getErrorLine() + "Missing id/bool expression");
                      parser.errNo++;
                   :}
                 | WHILE error
                   {:
                      System.out.println(parser.getErrorLine() + "Missing left parenthesis");
                      parser.errNo++;
                   :}
                 | error
                   {:
                      System.out.println(parser.getErrorLine() + "Missing while at start");
                      parser.errNo++;
                   :};

Statement ::= WhileStatement
              {:
                System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 2");
              :}
            | Assignment
              {:
                System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 3");
              :};

Assignment ::= ID ASSIGN Expression SEMICOLON 
               {:
                System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 4" );
               :}
             | ID ASSIGN Expression error
               {:
                  System.out.println(parser.getErrorLine() + "Missing semicolon at assignment");
                  parser.errNo++;
               :}
             | ID ASSIGN error
               {:
                  System.out.println(parser.getErrorLine() + "Invalid expression at assignment");
                  parser.errNo++;
               :}  
             | ID error
               {:
                  System.out.println(parser.getErrorLine() + "Missing assignment operator");
                  parser.errNo++;
               :};
             

Expression ::= Expression PLUS CONST
               {:
                System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 5" );
               :}
             | CONST
               {:
                System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 6" );
               :}
             | Expression PLUS error
               {:
                  System.out.println(parser.getErrorLine() + "Invalid constant in expression");
                  parser.errNo++;
               :}
             | Expression error
               {:
                  System.out.println(parser.getErrorLine() + "Invalid operator in expression");
                  parser.errNo++;
               :}
             | error
               {:
                  System.out.println(parser.getErrorLine() + "Invalid expression");
                  parser.errNo++;
               :};
              
             
