//import section

import java_cup.runtime.*;
import java.io.*;

parser code {:

    public int errNo = 0;
    public static final String ERROR_LINE = "Error at line <";

    public static final String RED_OUTPUT = "\u001B[31m";
    public static final String GREEN_OUTPUT = "\u001B[32m";
    public static final String BLUE_OUTPUT = "\u001B[34m";

    public static void main(String[] args)
    {
        try
        {
            FileReader file = new FileReader(args[0]);
            Scanner scanner = new MyLexer(file);
            MyParser parser = new MyParser(scanner);
            parser.parse();

            if (parser.errNo == 0)
                System.out.println(GREEN_OUTPUT + "Parsing complete. No errors found!.");
            else
                System.out.println(RED_OUTPUT + "Parsing complete. Number of errors: " + parser.errNo);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }

    public int getLine()
    {
        return ((MyLexer)getScanner()).getLine() + 1;
    }

    public String getErrorLine()
    {
        return RED_OUTPUT + MyParser.ERROR_LINE + getLine() + ">: ";
    }
:};


// Terminal symbols
terminal WHILE, LPAR, ID, RPAR, ASSIGN, SEMICOLON, PLUS, CONST, MAIN, READ, WRITE, LBPAR, RBPAR, COLON, COMMA, INT, CHAR, REAL, BOOL, MINUS, ASTER, FSLASH, LT, LTE, EQ, NEQ, GT, GTE, AND, OR;

// Nonterminal symbols
non terminal Program, Block, VarList, VarDecl, NameList, Type, StatementList, Statement, Loop, Expression, AndExpression, RelExpression, RelOp, ArExpression, Term, Factor, ExpressionList;




// Grammar

Program ::= MAIN LPAR RPAR Block
          | MAIN LPAR RPAR error
          {:
            System.out.println(parser.getErrorLine() + "Missing block");
            parser.errNo++;
          :};
     
Block ::= LBPAR VarList StatementList RBPAR;        
              
VarList ::= VarList VarDecl
          | VarList error
          {:
            System.out.println(parser.getErrorLine() + "Missing variable declaration");
            parser.errNo++;
          :}
          | VarDecl
          | error
          {:
            System.out.println(parser.getErrorLine() + "Invalid variable declaration");
            parser.errNo++;
          :};
    
VarDecl ::= NameList COLON Type SEMICOLON
          | NameList COLON Type error
          {:
            System.out.println(parser.getErrorLine() + "Missing semicolon");
            parser.errNo++;
          :}
          | NameList error
          {:
            System.out.println(parser.getErrorLine() + "Missing colon");
            parser.errNo++;
          :};
            
NameList ::= NameList COMMA ID
           | NameList COMMA error
           {:
             System.out.println(parser.getErrorLine() + "Missing id after comma");
             parser.errNo++;
           :}
           | ID;
            
Type ::= INT
       | CHAR
       | REAL       
       | BOOL
       | error
       {:
         System.out.println(parser.getErrorLine() + "Invalid type declaration");
         parser.errNo++;
       :};
            
StatementList ::= StatementList Statement
                | Statement;
                
Statement ::= Loop
            | ID ASSIGN Expression SEMICOLON
            | ID ASSIGN Expression error
            {:
              System.out.println(parser.getErrorLine() + "Missing semicolon at assignment");
              parser.errNo++;
            :}
            ID ASSIGN  error
            {:
              System.out.println(parser.getErrorLine() + "Invalid statement");
              parser.errNo++;
            :}
            | READ LPAR NameList RPAR SEMICOLON
            | READ LPAR NameList RPAR error
            {:
              System.out.println(parser.getErrorLine() + "Missing semicolon");
              parser.errNo++;
            :}
            | READ LPAR NameList error
            {:
              System.out.println(parser.getErrorLine() + "Missing closing bracket on read");
              parser.errNo++;
            :}
            | READ error
            {:
              System.out.println(parser.getErrorLine() + "Missing opening bracket on read");
              parser.errNo++;
            :}
            | WRITE LPAR ExpressionList RPAR SEMICOLON
            | WRITE LPAR ExpressionList RPAR error
            {:
              System.out.println(parser.getErrorLine() + "Missing semicolon");
              parser.errNo++;
            :}
            | WRITE LPAR ExpressionList error
            {:
              System.out.println(parser.getErrorLine() + "Missing closing bracket on write");
              parser.errNo++;
            :}
            | WRITE error
            {:
              System.out.println(parser.getErrorLine() + "Missing opening bracket on write");
              parser.errNo++;
            :}
            | Block;
                
Loop ::= WHILE LPAR Expression RPAR Statement
       | WHILE LPAR Expression error
       {:
         System.out.println(parser.getErrorLine() + "Missing parenthesis after expression");
         parser.errNo++;
       :}
       | WHILE error
       {:
         System.out.println(parser.getErrorLine() + "Missing parenthesis before expression");
         parser.errNo++;
       :};
            
Expression ::= Expression OR AndExpression
             | AndExpression;
            
AndExpression ::= AndExpression AND RelExpression
                | RelExpression;

RelExpression ::= ArExpression RelOp ArExpression
                | ArExpression;

RelOp ::= LT
        | LTE
        | EQ
        | NEQ
        | GT
        | GTE;
        
ArExpression ::= ArExpression PLUS Term
               | ArExpression MINUS Term
               | Term;
            
Term ::= Term ASTER Factor
       | Term FSLASH Factor
       | Factor;
            
Factor ::= ID 
         | CONST
         | LPAR Expression RPAR
         | LPAR Expression error
         {:
           System.out.println(parser.getErrorLine() + "Missing parenthesis after expression");
           parser.errNo++;
         :}
         | error
         {:
           System.out.println(parser.getErrorLine() + "Unknown factor statement");
           parser.errNo++;
         :};

ExpressionList ::= ExpressionList COMMA Expression 
                 | Expression;
             
