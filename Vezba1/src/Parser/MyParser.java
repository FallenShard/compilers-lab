
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 28 14:29:30 CET 2014
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import SymbolTable.*;
import AST.*;

/** CUP v0.10k generated parser.
  * @version Sun Dec 28 14:29:30 CET 2014
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\003\006\000\002\002\004\000\002\004" +
    "\006\000\002\006\004\000\002\006\003\000\002\007\006" +
    "\000\002\022\005\000\002\022\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\005\004\000\002\005\003\000\002\010\003\000\002\010" +
    "\006\000\002\010\003\000\002\011\007\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\003\000" +
    "\002\016\005\000\002\016\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\005\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\004\004\005\001\002\000\004\002\107\001" +
    "\002\000\004\012\006\001\002\000\004\013\007\001\002" +
    "\000\004\014\011\001\002\000\004\002\001\001\002\000" +
    "\004\033\012\001\002\000\006\016\ufffa\020\ufffa\001\002" +
    "\000\010\011\ufffd\014\ufffd\033\ufffd\001\002\000\010\011" +
    "\027\014\011\033\034\001\002\000\006\016\017\020\016" +
    "\001\002\000\004\033\026\001\002\000\012\005\024\006" +
    "\023\007\021\010\022\001\002\000\004\017\025\001\002" +
    "\000\004\017\ufff7\001\002\000\004\017\ufff6\001\002\000" +
    "\004\017\ufff8\001\002\000\004\017\ufff9\001\002\000\010" +
    "\011\ufffc\014\ufffc\033\ufffc\001\002\000\006\016\ufffb\020" +
    "\ufffb\001\002\000\004\012\103\001\002\000\012\011\ufff1" +
    "\014\ufff1\015\ufff1\033\ufff1\001\002\000\012\011\027\014" +
    "\011\015\102\033\100\001\002\000\010\011\ufffe\014\ufffe" +
    "\033\ufffe\001\002\000\012\011\ufff4\014\ufff4\015\ufff4\033" +
    "\ufff4\001\002\000\010\016\ufffa\020\ufffa\021\036\001\002" +
    "\000\012\011\ufff3\014\ufff3\015\ufff3\033\ufff3\001\002\000" +
    "\016\012\041\033\050\034\053\035\046\036\044\037\045" +
    "\001\002\000\024\013\uffea\017\uffea\022\073\023\074\026" +
    "\uffea\027\uffea\030\071\031\070\032\072\001\002\000\030" +
    "\013\uffdf\017\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\001\002\000\016" +
    "\012\041\033\050\034\053\035\046\036\044\037\045\001" +
    "\002\000\012\013\uffee\017\uffee\026\uffee\027\063\001\002" +
    "\000\006\017\060\026\061\001\002\000\030\013\uffdb\017" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\001\002\000\030\013\uffdc\017" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\001\002\000\030\013\uffda\017" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\001\002\000\030\013\uffe4\017" +
    "\uffe4\022\uffe4\023\uffe4\024\055\025\054\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\001\002\000\030\013\uffe0\017" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\001\002\000\030\013\uffe1\017" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\001\002\000\012\013\uffec\017" +
    "\uffec\026\uffec\027\uffec\001\002\000\030\013\uffdd\017\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\001\002\000\016\012\041\033\050" +
    "\034\053\035\046\036\044\037\045\001\002\000\016\012" +
    "\041\033\050\034\053\035\046\036\044\037\045\001\002" +
    "\000\030\013\uffe3\017\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\001\002" +
    "\000\030\013\uffe2\017\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\001\002" +
    "\000\012\011\ufff2\014\ufff2\015\ufff2\033\ufff2\001\002\000" +
    "\016\012\041\033\050\034\053\035\046\036\044\037\045" +
    "\001\002\000\012\013\uffef\017\uffef\026\uffef\027\063\001" +
    "\002\000\016\012\041\033\050\034\053\035\046\036\044" +
    "\037\045\001\002\000\012\013\uffed\017\uffed\026\uffed\027" +
    "\uffed\001\002\000\006\013\066\026\061\001\002\000\030" +
    "\013\uffde\017\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\001\002\000\016" +
    "\012\041\033\050\034\053\035\046\036\044\037\045\001" +
    "\002\000\016\012\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\001\002\000\016\012\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\001\002\000\016\012\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\001\002\000\016\012" +
    "\041\033\050\034\053\035\046\036\044\037\045\001\002" +
    "\000\016\012\041\033\050\034\053\035\046\036\044\037" +
    "\045\001\002\000\030\013\uffe5\017\uffe5\022\uffe5\023\uffe5" +
    "\024\055\025\054\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\001\002\000\030\013\uffe6\017\uffe6\022\uffe6\023\uffe6" +
    "\024\055\025\054\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\001\002\000\016\013\uffeb\017\uffeb\022\073\023\074" +
    "\026\uffeb\027\uffeb\001\002\000\004\021\036\001\002\000" +
    "\012\011\ufff5\014\ufff5\015\ufff5\033\ufff5\001\002\000\014" +
    "\002\uffff\011\uffff\014\uffff\015\uffff\033\uffff\001\002\000" +
    "\016\012\041\033\050\034\053\035\046\036\044\037\045" +
    "\001\002\000\006\013\105\026\061\001\002\000\010\011" +
    "\027\014\011\033\100\001\002\000\012\011\ufff0\014\ufff0" +
    "\015\ufff0\033\ufff0\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\010\006\013\007\012\022\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\027" +
    "\005\030\007\031\010\032\011\034\022\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\027\010\100\011\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\042\015\041\016\051\017\036\020\046\021\050\023\037" +
    "\001\001\000\004\013\066\001\001\000\002\001\001\000" +
    "\020\014\064\015\041\016\051\017\036\020\046\021\050" +
    "\023\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\056\023\037\001\001" +
    "\000\006\021\055\023\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\061\016\051" +
    "\017\036\020\046\021\050\023\037\001\001\000\002\001" +
    "\001\000\014\016\063\017\036\020\046\021\050\023\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\076\020\046\021\050\023\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\075\021\050\023\037\001\001\000\010\020\074" +
    "\021\050\023\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\103\015\041\016\051\017" +
    "\036\020\046\021\050\023\037\001\001\000\002\001\001" +
    "\000\010\004\027\010\105\011\034\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    SymbolTable symbolTable = new SymbolTable();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Constant ::= CHARCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
             RESULT = new ConstNode(parser.symbolTable.getType("char"), c);
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Constant ::= REALCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
             RESULT = new ConstNode(parser.symbolTable.getType("real"), c);
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Constant ::= BOOLCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
             RESULT = new ConstNode(parser.symbolTable.getType("bool"), c);
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Constant ::= INTCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
             RESULT = new ConstNode(parser.symbolTable.getType("int"), c);
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Factor ::= LPAR Expression RPAR 
            {
              ExprNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
           RESULT = expr;
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Factor ::= Constant 
            {
              ExprNode RESULT = null;
		int conleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ConstNode con = (ConstNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
           RESULT = new ConstExprNode(con);
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Factor ::= ID 
            {
              ExprNode RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
           VarNode var = parser.symbolTable.getVar(name);
           RESULT = new VarExprNode(var);
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Term ::= Factor 
            {
              ExprNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
         RESULT = expr;
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Term ::= Term FSLASH Factor 
            {
              ExprNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
         RESULT = new DivisionNode(expr1, expr2);
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Term ::= Term ASTER Factor 
            {
              ExprNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
         RESULT = new MultiplicationNode(expr1, expr2);
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ArExpression ::= Term 
            {
              ExprNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                 RESULT = expr;
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ArExpression ::= ArExpression MINUS Term 
            {
              ExprNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                 RESULT = new SubtractionNode(expr1, expr2);
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ArExpression ::= ArExpression PLUS Term 
            {
              ExprNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                 RESULT = new AdditionNode(expr1, expr2);
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RelOp ::= GT 
            {
              String RESULT = null;
		
            RESULT = "Compare_Greater";
        
              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RelOp ::= EQ 
            {
              String RESULT = null;
		
            RESULT = "Compare_Equal";
        
              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RelOp ::= LT 
            {
              String RESULT = null;
		
            RESULT = "Compare_Less";
        
              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RelExpression ::= ArExpression 
            {
              ExprNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  RESULT = expr;
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              ExprNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int relopleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String relop = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  RESULT = new RelOpNode(expr1, expr2, relop);
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AndExpression ::= RelExpression 
            {
              ExprNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  RESULT = expr;
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AndExpression ::= AndExpression AND RelExpression 
            {
              ExprNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  RESULT = new LogicalAndNode(expr1, expr2);
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= AndExpression 
            {
              ExprNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
               RESULT = expr;
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= Expression OR AndExpression 
            {
              ExprNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
               RESULT = new LogicalOrNode(expr1, expr2);
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Loop ::= WHILE LPAR Expression RPAR Statement 
            {
              WhileStatementNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		StatementNode st = (StatementNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
         RESULT = new WhileStatementNode(expr, st);
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Loop*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= Block 
            {
              StatementNode RESULT = null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		BlockNode block = (BlockNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
              RESULT = block;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              StatementNode RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
              VarNode var = parser.symbolTable.getVar(name);
              RESULT = new AssignNode(var, expr);
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= Loop 
            {
              StatementNode RESULT = null;
		int loopleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int loopright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		WhileStatementNode loop = (WhileStatementNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
              RESULT = loop;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StatementList ::= Statement 
            {
              BlockNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		StatementNode st = (StatementNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  RESULT = new BlockNode();
                  RESULT.addStatement(st);
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= StatementList Statement 
            {
              BlockNode RESULT = null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		BlockNode stl = (BlockNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		StatementNode st = (StatementNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  RESULT = stl;
                  RESULT.addStatement(st);
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= BOOL 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("bool");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("real");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= CHAR 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("char");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("int");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
             RESULT = new ArrayList();
             RESULT.add(name);
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
             RESULT = arr;
             RESULT.add(name);
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= NameList COLON Type SEMICOLON 
            {
              Object RESULT = null;
		int namesleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int namesright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ArrayList names = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode type = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
            for (int i = 0; i < names.size(); i++)
            {
                String name = (String)names.get(i);
                parser.symbolTable.addVar(name, type);
            }
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarList ::= VarDecl 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarList ::= VarList VarDecl 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= LBPAR VarList StatementList RBPAR 
            {
              BlockNode RESULT = null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		BlockNode stl = (BlockNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
          RESULT = stl;
        
              CUP$MyParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		BlockNode start_val = (BlockNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LPAR RPAR Block 
            {
              BlockNode RESULT = null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		BlockNode block = (BlockNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
            RESULT = block;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

