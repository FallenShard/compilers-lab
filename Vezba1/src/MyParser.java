
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Dec 22 19:00:35 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Mon Dec 22 19:00:35 CET 2014
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\003\006\000\002\002\004\000\002\003" +
    "\006\000\002\004\006\000\002\025\003\000\002\026\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\005\003\000\002\006\006\000\002\006\006\000\002" +
    "\006\005\000\002\006\004\000\002\023\005\000\002\023" +
    "\005\000\002\023\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\007\004\000" +
    "\002\007\003\000\002\010\003\000\002\010\006\000\002" +
    "\010\006\000\002\010\005\000\002\010\007\000\002\010" +
    "\007\000\002\010\006\000\002\010\005\000\002\010\004" +
    "\000\002\010\007\000\002\010\007\000\002\010\006\000" +
    "\002\010\005\000\002\010\004\000\002\010\003\000\002" +
    "\011\007\000\002\011\006\000\002\011\004\000\002\015" +
    "\005\000\002\015\003\000\002\016\005\000\002\016\003" +
    "\000\002\017\005\000\002\017\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\013\005\000\002\013\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\005\005\001\002\000\004\002\156\001" +
    "\002\000\004\014\006\001\002\000\004\015\007\001\002" +
    "\000\006\003\010\020\013\001\002\000\004\002\uffff\001" +
    "\002\000\006\003\015\040\014\001\002\000\004\002\001" +
    "\001\002\000\006\003\ufffd\040\ufffd\001\002\000\012\003" +
    "\ufff1\015\ufff1\022\ufff1\023\ufff1\001\002\000\016\003\ufff8" +
    "\004\ufff8\006\ufff8\007\ufff8\020\ufff8\040\ufff8\001\002\000" +
    "\016\003\ufff9\004\ufff9\006\ufff9\007\ufff9\020\ufff9\040\ufff9" +
    "\001\002\000\016\003\045\004\037\006\036\007\046\020" +
    "\013\040\044\001\002\000\010\003\022\022\023\023\021" +
    "\001\002\000\006\003\035\040\034\001\002\000\016\003" +
    "\ufff4\004\ufff4\006\ufff4\007\ufff4\020\ufff4\040\ufff4\001\002" +
    "\000\014\003\025\010\031\011\030\012\026\013\027\001" +
    "\002\000\006\003\033\017\032\001\002\000\016\003\ufff5" +
    "\004\ufff5\006\ufff5\007\ufff5\020\ufff5\040\ufff5\001\002\000" +
    "\006\003\uffee\017\uffee\001\002\000\006\003\uffed\017\uffed" +
    "\001\002\000\006\003\uffef\017\uffef\001\002\000\006\003" +
    "\ufff0\017\ufff0\001\002\000\016\003\ufff7\004\ufff7\006\ufff7" +
    "\007\ufff7\020\ufff7\040\ufff7\001\002\000\016\003\ufff6\004" +
    "\ufff6\006\ufff6\007\ufff6\020\ufff6\040\ufff6\001\002\000\012" +
    "\003\ufff3\015\ufff3\022\ufff3\023\ufff3\001\002\000\012\003" +
    "\ufff2\015\ufff2\022\ufff2\023\ufff2\001\002\000\006\003\146" +
    "\014\147\001\002\000\006\003\140\014\141\001\002\000" +
    "\016\004\uffdc\006\uffdc\007\uffdc\020\uffdc\021\uffdc\040\uffdc" +
    "\001\002\000\016\004\037\006\036\007\046\020\013\021" +
    "\137\040\136\001\002\000\016\003\ufffb\004\ufffb\006\ufffb" +
    "\007\ufffb\020\ufffb\040\ufffb\001\002\000\016\004\uffeb\006" +
    "\uffeb\007\uffeb\020\uffeb\021\uffeb\040\uffeb\001\002\000\012" +
    "\003\ufff1\016\127\022\ufff1\023\ufff1\001\002\000\016\003" +
    "\ufffa\004\ufffa\006\ufffa\007\ufffa\020\ufffa\040\ufffa\001\002" +
    "\000\006\003\050\014\051\001\002\000\016\004\uffea\006" +
    "\uffea\007\uffea\020\uffea\021\uffea\040\uffea\001\002\000\016" +
    "\004\uffdd\006\uffdd\007\uffdd\020\uffdd\021\uffdd\040\uffdd\001" +
    "\002\000\020\003\066\014\055\040\063\041\070\042\061" +
    "\043\057\044\062\001\002\000\010\003\122\015\123\023" +
    "\121\001\002\000\036\003\uffd3\015\uffd3\017\uffd3\023\uffd3" +
    "\024\112\025\105\030\115\031\107\032\111\033\110\034" +
    "\113\035\106\036\uffd3\037\uffd3\001\002\000\042\003\uffc5" +
    "\015\uffc5\017\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\001\002\000\020\003\073\014\055\040" +
    "\063\041\070\042\061\043\057\044\062\001\002\000\016" +
    "\003\uffd7\015\uffd7\017\uffd7\023\uffd7\036\100\037\uffd7\001" +
    "\002\000\042\003\uffbd\015\uffbd\017\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\001\002\000\012" +
    "\003\uffc0\015\uffc0\023\uffc0\037\076\001\002\000\042\003" +
    "\uffbc\015\uffbc\017\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\001\002\000\042\003\uffbe\015\uffbe" +
    "\017\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\001\002\000\042\003\uffc6\015\uffc6\017\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\001" +
    "\002\000\042\003\uffca\015\uffca\017\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\072\027\071\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\001\002\000\042" +
    "\003\uffc7\015\uffc7\017\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\001\002\000\054\003\uffc2\004" +
    "\uffde\006\uffde\007\uffde\015\uffc2\020\uffde\021\uffde\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffde" +
    "\001\002\000\016\003\uffd5\015\uffd5\017\uffd5\023\uffd5\036" +
    "\uffd5\037\uffd5\001\002\000\042\003\uffbf\015\uffbf\017\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\001\002\000\020\003\073\014\055\040\063\041\070\042" +
    "\061\043\057\044\062\001\002\000\020\003\073\014\055" +
    "\040\063\041\070\042\061\043\057\044\062\001\002\000" +
    "\042\003\uffc2\015\uffc2\017\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\001\002\000\042\003\uffc9" +
    "\015\uffc9\017\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\001\002\000\042\003\uffc8\015\uffc8\017" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\001\002\000\020\003\073\014\055\040\063\041\070" +
    "\042\061\043\057\044\062\001\002\000\016\003\uffd8\015" +
    "\uffd8\017\uffd8\023\uffd8\036\100\037\uffd8\001\002\000\020" +
    "\003\073\014\055\040\063\041\070\042\061\043\057\044" +
    "\062\001\002\000\016\003\uffd6\015\uffd6\017\uffd6\023\uffd6" +
    "\036\uffd6\037\uffd6\001\002\000\010\003\103\015\104\037" +
    "\076\001\002\000\042\003\uffc3\015\uffc3\017\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\001\002" +
    "\000\042\003\uffc4\015\uffc4\017\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\001\002\000\020\003" +
    "\073\014\055\040\063\041\070\042\061\043\057\044\062" +
    "\001\002\000\020\003\uffcd\014\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\001\002\000\020\003\uffd1\014\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\001\002\000" +
    "\020\003\uffcf\014\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\001\002\000\020\003\uffd0\014\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002\000\020\003\073" +
    "\014\055\040\063\041\070\042\061\043\057\044\062\001" +
    "\002\000\020\003\uffce\014\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\001\002\000\020\003\073\014\055\040" +
    "\063\041\070\042\061\043\057\044\062\001\002\000\020" +
    "\003\uffd2\014\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\001\002\000\022\003\uffd4\015\uffd4\017\uffd4\023\uffd4" +
    "\024\112\025\105\036\uffd4\037\uffd4\001\002\000\042\003" +
    "\uffcc\015\uffcc\017\uffcc\023\uffcc\024\uffcc\025\uffcc\026\072" +
    "\027\071\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\001\002\000\042\003\uffcb\015\uffcb" +
    "\017\uffcb\023\uffcb\024\uffcb\025\uffcb\026\072\027\071\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\001\002\000\020\003\073\014\055\040\063\041" +
    "\070\042\061\043\057\044\062\001\002\000\016\004\uffdf" +
    "\006\uffdf\007\uffdf\020\uffdf\021\uffdf\040\uffdf\001\002\000" +
    "\006\003\125\017\124\001\002\000\016\004\uffe1\006\uffe1" +
    "\007\uffe1\020\uffe1\021\uffe1\040\uffe1\001\002\000\016\004" +
    "\uffe0\006\uffe0\007\uffe0\020\uffe0\021\uffe0\040\uffe0\001\002" +
    "\000\012\003\uffc1\015\uffc1\023\uffc1\037\076\001\002\000" +
    "\020\003\131\014\055\040\063\041\070\042\061\043\057" +
    "\044\062\001\002\000\010\003\133\017\132\037\076\001" +
    "\002\000\052\003\uffc2\004\uffe7\006\uffe7\007\uffe7\017\uffc2" +
    "\020\uffe7\021\uffe7\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffe7\001\002\000\016\004\uffe9\006\uffe9\007" +
    "\uffe9\020\uffe9\021\uffe9\040\uffe9\001\002\000\016\004\uffe8" +
    "\006\uffe8\007\uffe8\020\uffe8\021\uffe8\040\uffe8\001\002\000" +
    "\020\002\ufffe\004\ufffe\006\ufffe\007\ufffe\020\ufffe\021\ufffe" +
    "\040\ufffe\001\002\000\016\004\uffec\006\uffec\007\uffec\020" +
    "\uffec\021\uffec\040\uffec\001\002\000\004\016\127\001\002" +
    "\000\020\002\ufffc\004\ufffc\006\ufffc\007\ufffc\020\ufffc\021" +
    "\ufffc\040\ufffc\001\002\000\016\004\uffd9\006\uffd9\007\uffd9" +
    "\020\uffd9\021\uffd9\040\uffd9\001\002\000\020\003\073\014" +
    "\055\040\063\041\070\042\061\043\057\044\062\001\002" +
    "\000\010\003\143\015\144\037\076\001\002\000\016\004" +
    "\uffda\006\uffda\007\uffda\020\uffda\021\uffda\040\uffda\001\002" +
    "\000\014\004\037\006\036\007\046\020\013\040\136\001" +
    "\002\000\016\004\uffdb\006\uffdb\007\uffdb\020\uffdb\021\uffdb" +
    "\040\uffdb\001\002\000\016\004\uffe2\006\uffe2\007\uffe2\020" +
    "\uffe2\021\uffe2\040\uffe2\001\002\000\006\003\150\040\014" +
    "\001\002\000\016\004\uffe3\006\uffe3\007\uffe3\020\uffe3\021" +
    "\uffe3\040\uffe3\001\002\000\010\003\152\015\153\023\021" +
    "\001\002\000\016\004\uffe4\006\uffe4\007\uffe4\020\uffe4\021" +
    "\uffe4\040\uffe4\001\002\000\006\003\155\017\154\001\002" +
    "\000\016\004\uffe6\006\uffe6\007\uffe6\020\uffe6\021\uffe6\040" +
    "\uffe6\001\002\000\016\004\uffe5\006\uffe5\007\uffe5\020\uffe5" +
    "\021\uffe5\040\uffe5\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\011\025\010" +
    "\001\001\000\002\001\001\000\010\005\016\006\015\023" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\037\006\041\007\040\010\042\011\046\023\017\025\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\037\010\134" +
    "\011\046\025\010\026\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\051\015\057\016\055\017\066\020\052\021\063\022\064" +
    "\024\053\001\001\000\002\001\001\000\004\012\113\001" +
    "\001\000\002\001\001\000\020\015\101\016\055\017\066" +
    "\020\052\021\063\022\064\024\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\074\024\053\001\001\000\006\022" +
    "\073\024\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\076\017\066\020\052\021" +
    "\063\022\064\024\053\001\001\000\002\001\001\000\014" +
    "\017\100\020\052\021\063\022\064\024\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\117\022\064\024\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\116\022\064\024\053\001\001\000" +
    "\002\001\001\000\012\020\115\021\063\022\064\024\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\125\016\055\017\066" +
    "\020\052\021\063\022\064\024\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\127\016\055\017\066\020" +
    "\052\021\063\022\064\024\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\141\016\055\017" +
    "\066\020\052\021\063\022\064\024\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\037\010\144\011" +
    "\046\025\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int errNo = 0;
    public int warnNo = 0;
    public static final String ERROR_LINE = "Error at line <";

    public static final String RED_OUTPUT = "\u001B[31m";
    public static final String GREEN_OUTPUT = "\u001B[32m";
    public static final String BLUE_OUTPUT = "\u001B[34m";
    public static final String YELLOW_OUTPUT = "\u001B[33m";

    public static final String ERROR_COLOR = RED_OUTPUT;
    public static final String WARNING_COLOR = YELLOW_OUTPUT;

    public SymbolTable symbolTable = new SymbolTable();
    
    public boolean shouldIncrScope = false;

    public static void main(String[] args)
    {
        try
        {
            FileReader file = new FileReader(args[0]);
            Scanner scanner = new MyLexer(file);
            MyParser parser = new MyParser(scanner);
            //((MyLexer)scanner).getParser(parser);
            parser.parse();
            parser.checkWarnings();
            
            parser.symbolTable.printAllVars();

            if (parser.errNo == 0 && parser.warnNo == 0)
                System.out.println(GREEN_OUTPUT + "Parsing complete. No errors found!.");
            else
            {
                System.out.println(GREEN_OUTPUT + "Parsing complete.");
                if (parser.errNo > 0)
                    System.out.println(ERROR_COLOR + "Number of errors: " + parser.errNo);
                if (parser.warnNo > 0)
                    System.out.println(WARNING_COLOR + "Number of warnings: " + parser.warnNo);
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
            e.printStackTrace();
        }
    }

    public void checkWarnings()
    {
        SymbolNode current = symbolTable.getVariables();
        while (current != null)
        {
            VarNode var = (VarNode) current;
            if (var.lastDef == -1 && var.lastUse == -1)
            {
                System.out.println(WARNING_COLOR + "Warning: Variable " + var.name + " is declared, but not used");
                warnNo++;
            }
            else if (var.lastDef > var.lastUse)
            {
                System.out.println(WARNING_COLOR + "Warning: Assigned value to " + var.name + 
                                   " in line " +  var.lastDef + " is not used anywhere.");
                warnNo++;
            }
            current = current.next;
        }   
    }
    
    public void checkRedeclaration(ArrayList names, TypeNode type)
    {
        for (int i = 0; i < names.size(); i++)
        {
            String name = (String)names.get(i);
            
            if (!symbolTable.addVar(name, type))
            {
                System.out.println(getErrorLine() + "Variable " + name + " is already declared.");
                errNo++;
            }
        }
    }
    
    public void checkDeclAndType(String name, TypeNode expr)
    {
        VarNode var = symbolTable.getVar(name);
        if (var == null)
        {
            System.out.println(getErrorLine() + "Variable " + name + " is not declared.");
            errNo++;
        }
        else 
        {
            var.lastDef = getLine();
            if (var.type.typeKind != expr.typeKind)
            {
                System.out.println(getErrorLine() + "Type mismatch in assignment.");
                errNo++;
            }
        }
    }

    public void checkDecl(String name)
    {
        VarNode var = symbolTable.getVar(name);
        if (var == null)
        {
            System.out.println(getErrorLine() + "Variable " + name + " is not declared.");
            errNo++;
        }
        else 
            var.lastDef = getLine();
    }
    
    public void checkNameListDecl(ArrayList names)
    {
        for (int i = 0; i < names.size(); i++)
        {
            String name = (String)names.get(i);
            checkDecl(name);
        }
    }
    
    public void checkExprType(TypeNode expr, int typeCode, String typeName)
    {
        if (expr.typeKind != typeCode)
         {
             System.out.println(getErrorLine() + "Loop expression does not evaluate to " +
             typeName + ": " + expr.name + " provided.");
             errNo++;
         }
    }
    
    public void checkExprTypes(TypeNode expr1, TypeNode expr2, int typeCode, String operator)
    {
        if (expr1.typeKind != typeCode || expr2.typeKind != typeCode)
        {
            System.out.println(getErrorLine() + "Cannot use " + operator + " on operands of type "
            + expr1.name + " and " + expr2.name + ".");
            errNo++;
        }
    }
    
    public TypeNode checkArithmetics(TypeNode expr1, TypeNode expr2, String operator)
    {
        TypeNode result = null;
        if (expr1.typeKind == TypeNode.Bool || expr2.typeKind == TypeNode.Bool)
        {
            System.out.println(getErrorLine() + "Cannot use arithmetic operator " + operator + " on operands of type bool.");
            errNo++;
            result = symbolTable.getType("bool");
        }
        else if (expr1.typeKind != expr2.typeKind)
        {
            System.out.println(getErrorLine() + "Operand type mismatch on operator " + operator + ": "
             + expr1.name + " and " + expr2.name + ".");
            errNo++;
            result = symbolTable.getType("unknown");
        }
        else if (expr1.typeKind == TypeNode.Char)
            result = symbolTable.getType("char");
        else if (expr1.typeKind == TypeNode.Real)
            result = symbolTable.getType("real");
        else if (expr1.typeKind == TypeNode.Int)
            result = symbolTable.getType("int");
           
        return result;
    }
    
    public int getLine()
    {
        return ((MyLexer)getScanner()).getLine() + 1;
    }

    public String getErrorLine()
    {
        return ERROR_COLOR + MyParser.ERROR_LINE + getLine() + ">: ";
    }
    
    public void debug(String param)
    {
        System.out.println(param + ", SCOPE: " + symbolTable.activeScope + ", LINE: " + getLine());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Constant ::= CHARCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                RESULT = new ConstNode(parser.symbolTable.getType("char"), c);
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(18/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Constant ::= REALCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                RESULT = new ConstNode(parser.symbolTable.getType("real"), c);
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(18/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Constant ::= BOOLCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                RESULT = new ConstNode(parser.symbolTable.getType("bool"), c);
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(18/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Constant ::= INTCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                RESULT = new ConstNode(parser.symbolTable.getType("int"), c);
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(18/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpressionList ::= Expression 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*ExpressionList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*ExpressionList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Factor ::= error 
            {
              TypeNode RESULT = null;
		
           System.out.println(parser.getErrorLine() + "Unknown factor statement");
           parser.errNo++;
           RESULT = parser.symbolTable.getType("unknown");
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Factor ::= LPAR Expression error 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
           System.out.println(parser.getErrorLine() + "Missing parenthesis after expression");
           parser.errNo++;
           RESULT = expr;
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Factor ::= LPAR Expression RPAR 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
           RESULT = expr;
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Factor ::= Constant 
            {
              TypeNode RESULT = null;
		int conleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ConstNode con = (ConstNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
           RESULT = con.type;
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Factor ::= ID 
            {
              TypeNode RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
           VarNode var = parser.symbolTable.getVar(name);
           if (var == null)
           {
               System.out.println(parser.getErrorLine() + "Variable " + name + " is not declared.");
               RESULT = parser.symbolTable.getType("unknown");
               parser.errNo++;
           }
           else 
           {
               RESULT = var.type;
               if (var.lastDef == -1)
               {
                   System.out.println(parser.getErrorLine() + "Variable " + name + " is not initialized.");
                   parser.errNo++;
               }
               var.lastUse = parser.getLine();
           }
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Term ::= Factor 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
         RESULT = expr;
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Term ::= Term FSLASH Factor 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
         RESULT = parser.checkArithmetics(expr1, expr2, "/");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Term ::= Term ASTER Factor 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
         RESULT = parser.checkArithmetics(expr1, expr2, "*");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ArExpression ::= Term 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                 RESULT = expr;
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ArExpression ::= ArExpression MINUS Term 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                 RESULT = parser.checkArithmetics(expr1, expr2, "-");
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ArExpression ::= ArExpression PLUS Term 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                 RESULT = parser.checkArithmetics(expr1, expr2, "+");
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RelOp ::= GTE 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RelOp ::= GT 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RelOp ::= NEQ 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RelOp ::= EQ 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelOp ::= LTE 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RelOp ::= LT 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelExpression ::= ArExpression 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  RESULT = expr;
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  if (expr1.typeKind != TypeNode.Bool || expr2.typeKind != TypeNode.Bool)
                  {
                      System.out.println(parser.getErrorLine() + "Cannot use relational operator on operands of type "
                      + expr1.name + " and " + expr2.name + ".");
                      parser.errNo++;
                  }
                  RESULT = parser.symbolTable.getType("bool");
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AndExpression ::= RelExpression 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  RESULT = expr;
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AndExpression ::= AndExpression AND RelExpression 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  parser.checkExprTypes(expr1, expr2, TypeNode.Bool, "Logical AND");
                  RESULT = parser.symbolTable.getType("bool");
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= AndExpression 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
               RESULT = expr;
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(11/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression OR AndExpression 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
               parser.checkExprTypes(expr1, expr2, TypeNode.Bool, "Logical OR");
               RESULT = parser.symbolTable.getType("bool");
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(11/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Loop ::= WHILE error 
            {
              Object RESULT = null;
		
         System.out.println(parser.getErrorLine() + "Missing parenthesis before expression");
         parser.errNo++;
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Loop*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Loop ::= WHILE LPAR Expression error 
            {
              Object RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
         parser.checkExprType(expr, TypeNode.Bool, "bool");
         RESULT = parser.symbolTable.getType("bool");
         System.out.println(parser.getErrorLine() + "Missing parenthesis after expression");
         parser.errNo++;
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Loop*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Loop ::= WHILE LPAR Expression RPAR Statement 
            {
              Object RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
         parser.checkExprType(expr, TypeNode.Bool, "bool");
         RESULT = parser.symbolTable.getType("bool");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Loop*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= Block 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= WRITE error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing opening bracket on write.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= WRITE LPAR error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing expression on write.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= WRITE LPAR ExpressionList error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing closing bracket on write.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= WRITE LPAR ExpressionList RPAR error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing semicolon at write.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= WRITE LPAR ExpressionList RPAR SEMICOLON 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= READ error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing opening bracket on read.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= READ LPAR error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing variable on read.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= READ LPAR NameList error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
              parser.checkNameListDecl(arr);
              System.out.println(parser.getErrorLine() + "Missing closing bracket on read.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= READ LPAR NameList RPAR error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
              parser.checkNameListDecl(arr);
              System.out.println(parser.getErrorLine() + "Missing semicolon at read.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= READ LPAR NameList RPAR SEMICOLON 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
              parser.checkNameListDecl(arr);
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= ID ASSIGN error 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
              parser.checkDecl(name);
              System.out.println(parser.getErrorLine() + "Invalid assignment expression.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= ID ASSIGN Expression error 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
              parser.checkDeclAndType(name, expr);
              System.out.println(parser.getErrorLine() + "Missing semicolon at assignment.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
              parser.checkDeclAndType(name, expr);
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= Loop 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StatementList ::= Statement 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= BOOL 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("bool");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= REAL 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("real");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("char");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= INT 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("int");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
             RESULT = new ArrayList();
             RESULT.add(name);
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NameList ::= NameList COMMA error 
            {
              ArrayList RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
             System.out.println(parser.getErrorLine() + "Missing identifier after comma.");
             parser.errNo++;
             RESULT = arr;
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
             RESULT = arr;
             RESULT.add(name);
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDecl ::= NameList error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
            parser.checkRedeclaration(arr, parser.symbolTable.getType("unknown"));
            System.out.println(parser.getErrorLine() + "Missing colon");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecl ::= NameList COLON error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
            parser.checkRedeclaration(arr, parser.symbolTable.getType("unknown"));
            System.out.println(parser.getErrorLine() + "Invalid type name.");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= NameList COLON Type error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
            parser.checkRedeclaration(arr, t);
            System.out.println(parser.getErrorLine() + "Missing semicolon");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= NameList COLON Type SEMICOLON 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
            parser.checkRedeclaration(arr, t);
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarList ::= error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getErrorLine() + "Invalid variable declaration.");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarList ::= VarDecl 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarList ::= VarList error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getErrorLine() + "Missing variable declaration.");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarList ::= VarList VarDecl 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ScopeEnd ::= RBPAR 
            {
              Object RESULT = null;
		
             parser.symbolTable.decrScope();
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(20/*ScopeEnd*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ScopeStart ::= LBPAR 
            {
              Object RESULT = null;
		
               parser.symbolTable.incrScope();
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(19/*ScopeStart*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Block ::= ScopeStart VarList StatementList ScopeEnd 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN LPAR RPAR error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getErrorLine() + "Missing block.");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LPAR RPAR Block 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

