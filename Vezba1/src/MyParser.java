
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Dec 16 01:45:27 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Tue Dec 16 01:45:27 CET 2014
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\003\007\000\002\002\004\000\002\003" +
    "\006\000\002\003\006\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\006\000\002\005\006\000\002\005\005\000\002" +
    "\005\004\000\002\006\005\000\002\006\003\000\002\006" +
    "\005\000\002\006\004\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\006\003\004\004\006\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\033\001\002\000\006\003\007" +
    "\005\010\001\002\000\004\002\ufffc\001\002\000\006\003" +
    "\012\006\011\001\002\000\006\003\013\007\014\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\ufffe\001\002\000" +
    "\012\002\uffff\003\004\004\006\006\015\001\002\000\006" +
    "\003\021\010\022\001\002\000\004\002\001\001\002\000" +
    "\004\002\ufff9\001\002\000\004\002\ufffa\001\002\000\004" +
    "\002\ufff5\001\002\000\006\003\024\013\023\001\002\000" +
    "\010\003\ufff3\011\ufff3\012\ufff3\001\002\000\012\002\ufff6" +
    "\003\ufff0\011\ufff0\012\ufff0\001\002\000\010\003\027\011" +
    "\026\012\030\001\002\000\004\002\ufff8\001\002\000\012" +
    "\002\ufff7\003\ufff1\011\ufff1\012\ufff1\001\002\000\006\003" +
    "\032\013\031\001\002\000\010\003\ufff4\011\ufff4\012\ufff4" +
    "\001\002\000\010\003\ufff2\011\ufff2\012\ufff2\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\017\004\015\005\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int errNo = 0;
    public static final String ERROR_LINE = "Error at line <";

    public static final String RED_OUTPUT = "\u001B[31m";
    public static final String GREEN_OUTPUT = "\u001B[32m";
    public static final String BLUE_OUTPUT = "\u001B[34m";

    public static void main(String[] args)
    {
        try
        {
            FileReader file = new FileReader(args[0]);
            Scanner scanner = new MyLexer(file);
            MyParser parser = new MyParser(scanner);
            parser.parse();

            if (parser.errNo == 0)
                System.out.println(GREEN_OUTPUT + "Parsing complete. No errors found!.");
            else
                System.out.println(RED_OUTPUT + "Parsing complete. Number of errors: " + parser.errNo);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }

    public int getLine()
    {
        return ((MyLexer)getScanner()).getLine() + 1;
    }

    public String getErrorLine()
    {
        return RED_OUTPUT + MyParser.ERROR_LINE + getLine() + ">: ";
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expression ::= error 
            {
              Object RESULT = null;
		
                  System.out.println(parser.getErrorLine() + "Invalid expression");
                  parser.errNo++;
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expression ::= Expression error 
            {
              Object RESULT = null;
		
                  System.out.println(parser.getErrorLine() + "Invalid operator in expression");
                  parser.errNo++;
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expression ::= Expression PLUS error 
            {
              Object RESULT = null;
		
                  System.out.println(parser.getErrorLine() + "Invalid constant in expression");
                  parser.errNo++;
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expression ::= CONST 
            {
              Object RESULT = null;
		
                System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 6" );
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expression ::= Expression PLUS CONST 
            {
              Object RESULT = null;
		
                System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 5" );
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Assignment ::= ID error 
            {
              Object RESULT = null;
		
                  System.out.println(parser.getErrorLine() + "Missing assignment operator");
                  parser.errNo++;
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Assignment ::= ID ASSIGN error 
            {
              Object RESULT = null;
		
                  System.out.println(parser.getErrorLine() + "Invalid expression at assignment");
                  parser.errNo++;
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Assignment ::= ID ASSIGN Expression error 
            {
              Object RESULT = null;
		
                  System.out.println(parser.getErrorLine() + "Missing semicolon at assignment");
                  parser.errNo++;
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Assignment ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		
                System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 4" );
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= Assignment 
            {
              Object RESULT = null;
		
                System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 3");
              
              CUP$MyParser$result = new java_cup.runtime.Symbol(2/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statement ::= WhileStatement 
            {
              Object RESULT = null;
		
                System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 2");
              
              CUP$MyParser$result = new java_cup.runtime.Symbol(2/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // WhileStatement ::= error 
            {
              Object RESULT = null;
		
                      System.out.println(parser.getErrorLine() + "Missing while at start");
                      parser.errNo++;
                   
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // WhileStatement ::= WHILE error 
            {
              Object RESULT = null;
		
                      System.out.println(parser.getErrorLine() + "Missing left parenthesis");
                      parser.errNo++;
                   
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // WhileStatement ::= WHILE LPAR error 
            {
              Object RESULT = null;
		
                      System.out.println(parser.getErrorLine() + "Missing id/bool expression");
                      parser.errNo++;
                   
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // WhileStatement ::= WHILE LPAR ID error 
            {
              Object RESULT = null;
		
                      System.out.println(parser.getErrorLine() + "Missing right parenthesis");
                      parser.errNo++;
                   
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // WhileStatement ::= WHILE LPAR ID RPAR 
            {
              Object RESULT = null;
		
                      System.out.println(parser.getErrorLine() + "Missing statement");
                      parser.errNo++;
                   
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= WhileStatement EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // WhileStatement ::= WHILE LPAR ID RPAR Statement 
            {
              Object RESULT = null;
		
                      System.out.println(MyParser.BLUE_OUTPUT + "Reduction by rule 1");
                   
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

