
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 21 19:19:54 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Sun Dec 21 19:19:54 CET 2014
  */
public class MyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\003\006\000\002\002\004\000\002\003" +
    "\006\000\002\004\006\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\006\000" +
    "\002\006\006\000\002\006\005\000\002\006\004\000\002" +
    "\023\005\000\002\023\005\000\002\023\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\007\004\000\002\007\003\000\002\010\003\000" +
    "\002\010\006\000\002\010\006\000\002\010\005\000\002" +
    "\010\007\000\002\010\007\000\002\010\006\000\002\010" +
    "\005\000\002\010\004\000\002\010\007\000\002\010\007" +
    "\000\002\010\006\000\002\010\005\000\002\010\004\000" +
    "\002\010\003\000\002\011\007\000\002\011\006\000\002" +
    "\011\004\000\002\015\005\000\002\015\003\000\002\016" +
    "\005\000\002\016\003\000\002\017\005\000\002\017\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\005\000\002\022\005\000" +
    "\002\022\003\000\002\013\005\000\002\013\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\005\005\001\002\000\004\002\154\001" +
    "\002\000\004\014\006\001\002\000\004\015\007\001\002" +
    "\000\006\003\010\020\012\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002\000\006\003\014\040\013" +
    "\001\002\000\012\003\ufff3\015\ufff3\022\ufff3\023\ufff3\001" +
    "\002\000\016\003\ufffa\004\ufffa\006\ufffa\007\ufffa\020\ufffa" +
    "\040\ufffa\001\002\000\016\003\ufffb\004\ufffb\006\ufffb\007" +
    "\ufffb\020\ufffb\040\ufffb\001\002\000\016\003\044\004\036" +
    "\006\035\007\045\020\012\040\043\001\002\000\010\003" +
    "\021\022\022\023\020\001\002\000\006\003\034\040\033" +
    "\001\002\000\016\003\ufff6\004\ufff6\006\ufff6\007\ufff6\020" +
    "\ufff6\040\ufff6\001\002\000\014\003\024\010\030\011\027" +
    "\012\025\013\026\001\002\000\006\003\032\017\031\001" +
    "\002\000\016\003\ufff7\004\ufff7\006\ufff7\007\ufff7\020\ufff7" +
    "\040\ufff7\001\002\000\006\003\ufff0\017\ufff0\001\002\000" +
    "\006\003\uffef\017\uffef\001\002\000\006\003\ufff1\017\ufff1" +
    "\001\002\000\006\003\ufff2\017\ufff2\001\002\000\016\003" +
    "\ufff9\004\ufff9\006\ufff9\007\ufff9\020\ufff9\040\ufff9\001\002" +
    "\000\016\003\ufff8\004\ufff8\006\ufff8\007\ufff8\020\ufff8\040" +
    "\ufff8\001\002\000\012\003\ufff5\015\ufff5\022\ufff5\023\ufff5" +
    "\001\002\000\012\003\ufff4\015\ufff4\022\ufff4\023\ufff4\001" +
    "\002\000\006\003\144\014\145\001\002\000\006\003\136" +
    "\014\137\001\002\000\016\004\uffde\006\uffde\007\uffde\020" +
    "\uffde\021\uffde\040\uffde\001\002\000\016\004\036\006\035" +
    "\007\045\020\012\021\135\040\134\001\002\000\016\003" +
    "\ufffd\004\ufffd\006\ufffd\007\ufffd\020\ufffd\040\ufffd\001\002" +
    "\000\016\004\uffed\006\uffed\007\uffed\020\uffed\021\uffed\040" +
    "\uffed\001\002\000\012\003\ufff3\016\126\022\ufff3\023\ufff3" +
    "\001\002\000\016\003\ufffc\004\ufffc\006\ufffc\007\ufffc\020" +
    "\ufffc\040\ufffc\001\002\000\006\003\047\014\050\001\002" +
    "\000\016\004\uffec\006\uffec\007\uffec\020\uffec\021\uffec\040" +
    "\uffec\001\002\000\016\004\uffdf\006\uffdf\007\uffdf\020\uffdf" +
    "\021\uffdf\040\uffdf\001\002\000\020\003\065\014\054\040" +
    "\063\041\067\042\060\043\056\044\061\001\002\000\010" +
    "\003\121\015\122\023\120\001\002\000\036\003\uffd5\015" +
    "\uffd5\017\uffd5\023\uffd5\024\110\025\104\030\114\031\106" +
    "\032\111\033\107\034\112\035\105\036\uffd5\037\uffd5\001" +
    "\002\000\042\003\uffc7\015\uffc7\017\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\001\002\000\020" +
    "\003\072\014\054\040\063\041\067\042\060\043\056\044" +
    "\061\001\002\000\016\003\uffd9\015\uffd9\017\uffd9\023\uffd9" +
    "\036\077\037\uffd9\001\002\000\042\003\uffbf\015\uffbf\017" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\001\002\000\012\003\uffc2\015\uffc2\023\uffc2\037\075" +
    "\001\002\000\042\003\uffbe\015\uffbe\017\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\001\002\000" +
    "\042\003\uffc0\015\uffc0\017\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\001\002\000\042\003\uffcc" +
    "\015\uffcc\017\uffcc\023\uffcc\024\uffcc\025\uffcc\026\071\027" +
    "\070\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\001\002\000\042\003\uffc8\015\uffc8\017" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\001\002\000\042\003\uffc9\015\uffc9\017\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\001\002" +
    "\000\054\003\uffc4\004\uffe0\006\uffe0\007\uffe0\015\uffc4\020" +
    "\uffe0\021\uffe0\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffe0\001\002\000\016\003\uffd7\015\uffd7" +
    "\017\uffd7\023\uffd7\036\uffd7\037\uffd7\001\002\000\042\003" +
    "\uffc1\015\uffc1\017\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\001\002\000\020\003\072\014\054" +
    "\040\063\041\067\042\060\043\056\044\061\001\002\000" +
    "\020\003\072\014\054\040\063\041\067\042\060\043\056" +
    "\044\061\001\002\000\042\003\uffc4\015\uffc4\017\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\001" +
    "\002\000\042\003\uffcb\015\uffcb\017\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\001\002\000\042" +
    "\003\uffca\015\uffca\017\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\001\002\000\020\003\072\014" +
    "\054\040\063\041\067\042\060\043\056\044\061\001\002" +
    "\000\016\003\uffda\015\uffda\017\uffda\023\uffda\036\077\037" +
    "\uffda\001\002\000\020\003\072\014\054\040\063\041\067" +
    "\042\060\043\056\044\061\001\002\000\016\003\uffd8\015" +
    "\uffd8\017\uffd8\023\uffd8\036\uffd8\037\uffd8\001\002\000\010" +
    "\003\102\015\103\037\075\001\002\000\042\003\uffc5\015" +
    "\uffc5\017\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\001\002\000\042\003\uffc6\015\uffc6\017\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\001\002\000\020\003\072\014\054\040\063\041\067\042" +
    "\060\043\056\044\061\001\002\000\020\003\uffcf\014\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002\000" +
    "\020\003\uffd3\014\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\001\002\000\020\003\uffd1\014\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\001\002\000\020\003\072" +
    "\014\054\040\063\041\067\042\060\043\056\044\061\001" +
    "\002\000\020\003\uffd2\014\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\001\002\000\020\003\uffd0\014\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002\000\020" +
    "\003\072\014\054\040\063\041\067\042\060\043\056\044" +
    "\061\001\002\000\020\003\uffd4\014\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\001\002\000\022\003\uffd6\015" +
    "\uffd6\017\uffd6\023\uffd6\024\110\025\104\036\uffd6\037\uffd6" +
    "\001\002\000\042\003\uffce\015\uffce\017\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\071\027\070\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\001\002\000" +
    "\042\003\uffcd\015\uffcd\017\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\071\027\070\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\001\002\000\020\003\072" +
    "\014\054\040\063\041\067\042\060\043\056\044\061\001" +
    "\002\000\016\004\uffe1\006\uffe1\007\uffe1\020\uffe1\021\uffe1" +
    "\040\uffe1\001\002\000\006\003\124\017\123\001\002\000" +
    "\016\004\uffe3\006\uffe3\007\uffe3\020\uffe3\021\uffe3\040\uffe3" +
    "\001\002\000\016\004\uffe2\006\uffe2\007\uffe2\020\uffe2\021" +
    "\uffe2\040\uffe2\001\002\000\012\003\uffc3\015\uffc3\023\uffc3" +
    "\037\075\001\002\000\020\003\130\014\054\040\063\041" +
    "\067\042\060\043\056\044\061\001\002\000\010\003\132" +
    "\017\131\037\075\001\002\000\052\003\uffc4\004\uffe9\006" +
    "\uffe9\007\uffe9\017\uffc4\020\uffe9\021\uffe9\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffe9\001\002\000\016" +
    "\004\uffeb\006\uffeb\007\uffeb\020\uffeb\021\uffeb\040\uffeb\001" +
    "\002\000\016\004\uffea\006\uffea\007\uffea\020\uffea\021\uffea" +
    "\040\uffea\001\002\000\016\004\uffee\006\uffee\007\uffee\020" +
    "\uffee\021\uffee\040\uffee\001\002\000\004\016\126\001\002" +
    "\000\020\002\ufffe\004\ufffe\006\ufffe\007\ufffe\020\ufffe\021" +
    "\ufffe\040\ufffe\001\002\000\016\004\uffdb\006\uffdb\007\uffdb" +
    "\020\uffdb\021\uffdb\040\uffdb\001\002\000\020\003\072\014" +
    "\054\040\063\041\067\042\060\043\056\044\061\001\002" +
    "\000\010\003\141\015\142\037\075\001\002\000\016\004" +
    "\uffdc\006\uffdc\007\uffdc\020\uffdc\021\uffdc\040\uffdc\001\002" +
    "\000\014\004\036\006\035\007\045\020\012\040\134\001" +
    "\002\000\016\004\uffdd\006\uffdd\007\uffdd\020\uffdd\021\uffdd" +
    "\040\uffdd\001\002\000\016\004\uffe4\006\uffe4\007\uffe4\020" +
    "\uffe4\021\uffe4\040\uffe4\001\002\000\006\003\146\040\013" +
    "\001\002\000\016\004\uffe5\006\uffe5\007\uffe5\020\uffe5\021" +
    "\uffe5\040\uffe5\001\002\000\010\003\150\015\151\023\020" +
    "\001\002\000\016\004\uffe6\006\uffe6\007\uffe6\020\uffe6\021" +
    "\uffe6\040\uffe6\001\002\000\006\003\153\017\152\001\002" +
    "\000\016\004\uffe8\006\uffe8\007\uffe8\020\uffe8\021\uffe8\040" +
    "\uffe8\001\002\000\016\004\uffe7\006\uffe7\007\uffe7\020\uffe7" +
    "\021\uffe7\040\uffe7\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\015\006" +
    "\014\023\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\036\006\040\007\037\010" +
    "\041\011\045\023\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\036\010\132\011\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\050\015\056\016\054\017\065\020\051\021\061\022" +
    "\063\024\052\001\001\000\002\001\001\000\004\012\112" +
    "\001\001\000\002\001\001\000\020\015\100\016\054\017" +
    "\065\020\051\021\061\022\063\024\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\073\024\052\001\001\000\006" +
    "\022\072\024\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\075\017\065\020\051" +
    "\021\061\022\063\024\052\001\001\000\002\001\001\000" +
    "\014\017\077\020\051\021\061\022\063\024\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\116\022\063\024\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\115\022\063\024\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\114\021\061\022\063\024" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\124\016\054\017" +
    "\065\020\051\021\061\022\063\024\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\126\016\054\017\065" +
    "\020\051\021\061\022\063\024\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\137\016\054\017\065\020\051" +
    "\021\061\022\063\024\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\036\010\142\011\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int errNo = 0;
    public int warnNo = 0;
    public static final String ERROR_LINE = "Error at line <";

    public static final String RED_OUTPUT = "\u001B[31m";
    public static final String GREEN_OUTPUT = "\u001B[32m";
    public static final String BLUE_OUTPUT = "\u001B[34m";
    public static final String YELLOW_OUTPUT = "\u001B[33m";

    public static final String ERROR_COLOR = RED_OUTPUT;
    public static final String WARNING_COLOR = YELLOW_OUTPUT;

    public SymbolTable symbolTable = new SymbolTable();

    public static void main(String[] args)
    {
        try
        {
            FileReader file = new FileReader(args[0]);
            Scanner scanner = new MyLexer(file);
            MyParser parser = new MyParser(scanner);
            parser.parse();
            parser.checkWarnings();

            if (parser.errNo == 0 && parser.warnNo == 0)
                System.out.println(GREEN_OUTPUT + "Parsing complete. No errors found!.");
            else
            {
                System.out.println(GREEN_OUTPUT + "Parsing complete.");
                if (parser.errNo > 0)
                    System.out.println(ERROR_COLOR + "Number of errors: " + parser.errNo);
                if (parser.warnNo > 0)
                    System.out.println(WARNING_COLOR + "Number of warnings: " + parser.warnNo);
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
            e.printStackTrace();
        }
    }

    public void checkWarnings()
    {
        SymbolNode current = symbolTable.getVariables();
        while (current != null)
        {
            VarNode var = (VarNode) current;
            if (var.lastDef == -1 && var.lastUse == -1)
            {
                System.out.println(WARNING_COLOR + "Warning: Variable " + var.name + " is declared, but not used");
                warnNo++;
            }
            else if (var.lastDef > var.lastUse)
            {
                System.out.println(WARNING_COLOR + "Warning: Assigned value to " + var.name + 
                                   " in line " +  var.lastDef + " is not used anywhere.");
                warnNo++;
            }
            current = current.next;
        }   
    }

    public int getLine()
    {
        return ((MyLexer)getScanner()).getLine() + 1;
    }

    public String getErrorLine()
    {
        return ERROR_COLOR + MyParser.ERROR_LINE + getLine() + ">: ";
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Constant ::= CHARCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                RESULT = new ConstNode(parser.symbolTable.getType("char"), c);
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(18/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Constant ::= REALCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                RESULT = new ConstNode(parser.symbolTable.getType("real"), c);
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(18/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Constant ::= BOOLCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                RESULT = new ConstNode(parser.symbolTable.getType("bool"), c);
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(18/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Constant ::= INTCONST 
            {
              ConstNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                RESULT = new ConstNode(parser.symbolTable.getType("int"), c);
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(18/*Constant*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpressionList ::= Expression 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*ExpressionList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(9/*ExpressionList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Factor ::= error 
            {
              TypeNode RESULT = null;
		
           System.out.println(parser.getErrorLine() + "Unknown factor statement");
           parser.errNo++;
           RESULT = parser.symbolTable.getType("unknown");
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Factor ::= LPAR Expression error 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
           System.out.println(parser.getErrorLine() + "Missing parenthesis after expression");
           parser.errNo++;
           RESULT = expr;
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Factor ::= LPAR Expression RPAR 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
           RESULT = expr;
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Factor ::= Constant 
            {
              TypeNode RESULT = null;
		int conleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		ConstNode con = (ConstNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
           RESULT = con.type;
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Factor ::= ID 
            {
              TypeNode RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
           VarNode var = parser.symbolTable.getVar(name);
           if (var == null)
           {
               System.out.println(parser.getErrorLine() + "Variable " + name + " is not declared.");
               RESULT = parser.symbolTable.getType("unknown");
               parser.errNo++;
           }
           else 
           {
               RESULT = var.type;
               if (var.lastDef == -1)
               {
                   System.out.println(parser.getErrorLine() + "Variable " + name + " is not initialized.");
                   parser.errNo++;
               }
               var.lastUse = parser.getLine();
           }
         
              CUP$MyParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Term ::= Factor 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
         RESULT = expr;
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Term ::= Term FSLASH Factor 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
         if (expr1.typeKind == TypeNode.Bool || expr2.typeKind == TypeNode.Bool)
         {
             System.out.println(parser.getErrorLine() + "Cannot use arithmetic operator / on operands of type bool.");
             parser.errNo++;
             RESULT = parser.symbolTable.getType("bool");
         }
         else if (expr1.typeKind != expr2.typeKind)
         {
             System.out.println(parser.getErrorLine() + "Operand type mismatch on operator +: "
              + expr1.name + " and " + expr2.name + ".");
              parser.errNo++;
         }
         else if (expr1.typeKind == TypeNode.Char)
            RESULT = parser.symbolTable.getType("char");
         else if (expr1.typeKind == TypeNode.Real)
            RESULT = parser.symbolTable.getType("real");
         else if (expr1.typeKind == TypeNode.Int)
            RESULT = parser.symbolTable.getType("int");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Term ::= Term ASTER Factor 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
         if (expr1.typeKind == TypeNode.Bool || expr2.typeKind == TypeNode.Bool)
         {
             System.out.println(parser.getErrorLine() + "Cannot use arithmetic operator * on operands of type bool.");
             parser.errNo++;
             RESULT = parser.symbolTable.getType("bool");
         }
         else if (expr1.typeKind != expr2.typeKind)
         {
             System.out.println(parser.getErrorLine() + "Operand type mismatch on operator +: "
              + expr1.name + " and " + expr2.name + ".");
              parser.errNo++;
         }
         else if (expr1.typeKind == TypeNode.Char)
            RESULT = parser.symbolTable.getType("char");
         else if (expr1.typeKind == TypeNode.Real)
            RESULT = parser.symbolTable.getType("real");
         else if (expr1.typeKind == TypeNode.Int)
            RESULT = parser.symbolTable.getType("int");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ArExpression ::= Term 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                 RESULT = expr;
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ArExpression ::= ArExpression MINUS Term 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                 if (expr1.typeKind == TypeNode.Bool || expr2.typeKind == TypeNode.Bool)
                 {
                     System.out.println(parser.getErrorLine() + "Cannot use arithmetic operator - on operands of type bool.");
                     parser.errNo++;
                     RESULT = parser.symbolTable.getType("bool");
                 }
                 else if (expr1.typeKind != expr2.typeKind)
                 {
                     System.out.println(parser.getErrorLine() + "Operand type mismatch on operator +: "
                      + expr1.name + " and " + expr2.name + ".");
                      parser.errNo++;
                 }
                 else if (expr1.typeKind == TypeNode.Char)
                    RESULT = parser.symbolTable.getType("char");
                 else if (expr1.typeKind == TypeNode.Real)
                    RESULT = parser.symbolTable.getType("real");
                 else if (expr1.typeKind == TypeNode.Int)
                    RESULT = parser.symbolTable.getType("int");
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ArExpression ::= ArExpression PLUS Term 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                 if (expr1.typeKind == TypeNode.Bool || expr2.typeKind == TypeNode.Bool)
                 {
                     System.out.println(parser.getErrorLine() + "Cannot use arithmetic operator + on operands of type bool.");
                     parser.errNo++;
                     RESULT = parser.symbolTable.getType("bool");
                 }
                 else if (expr1.typeKind != expr2.typeKind)
                 {
                     System.out.println(parser.getErrorLine() + "Operand type mismatch on operator +: "
                      + expr1.name + " and " + expr2.name + ".");
                      parser.errNo++;
                 }
                 else if (expr1.typeKind == TypeNode.Char)
                    RESULT = parser.symbolTable.getType("char");
                 else if (expr1.typeKind == TypeNode.Real)
                    RESULT = parser.symbolTable.getType("real");
                 else if (expr1.typeKind == TypeNode.Int)
                    RESULT = parser.symbolTable.getType("int");
               
              CUP$MyParser$result = new java_cup.runtime.Symbol(14/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RelOp ::= GTE 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RelOp ::= GT 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelOp ::= NEQ 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RelOp ::= EQ 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelOp ::= LTE 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelOp ::= LT 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(8/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelExpression ::= ArExpression 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  RESULT = expr;
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  if (expr1.typeKind != TypeNode.Bool || expr2.typeKind != TypeNode.Bool)
                  {
                      System.out.println(parser.getErrorLine() + "Cannot use relational operator on operands of type "
                      + expr1.name + " and " + expr2.name + ".");
                      parser.errNo++;
                  }
                  RESULT = parser.symbolTable.getType("bool");
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(13/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AndExpression ::= RelExpression 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  RESULT = expr;
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AndExpression ::= AndExpression AND RelExpression 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
                  if (expr1.typeKind != TypeNode.Bool || expr2.typeKind != TypeNode.Bool)
                  {
                      System.out.println(parser.getErrorLine() + "Cannot use logical AND on operands of type "
                      + expr1.name + " and " + expr2.name + ".");
                      parser.errNo++;
                  }
                  RESULT = parser.symbolTable.getType("bool");
                
              CUP$MyParser$result = new java_cup.runtime.Symbol(12/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= AndExpression 
            {
              TypeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
               RESULT = expr;
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(11/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression OR AndExpression 
            {
              TypeNode RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		TypeNode expr1 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		TypeNode expr2 = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
               if (expr1.typeKind != TypeNode.Bool || expr2.typeKind != TypeNode.Bool)
               {
                   System.out.println(parser.getErrorLine() + "Cannot use logical OR on operands of type "
                   + expr1.name + " and " + expr2.name + ".");
                   parser.errNo++;
               }
               RESULT = parser.symbolTable.getType("bool");
             
              CUP$MyParser$result = new java_cup.runtime.Symbol(11/*Expression*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Loop ::= WHILE error 
            {
              Object RESULT = null;
		
         System.out.println(parser.getErrorLine() + "Missing parenthesis before expression");
         parser.errNo++;
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Loop*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Loop ::= WHILE LPAR Expression error 
            {
              Object RESULT = null;
		
         System.out.println(parser.getErrorLine() + "Missing parenthesis after expression");
         parser.errNo++;
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Loop*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Loop ::= WHILE LPAR Expression RPAR Statement 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(7/*Loop*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= Block 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= WRITE error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing opening bracket on write.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= WRITE LPAR error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing expression on write.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= WRITE LPAR ExpressionList error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing closing bracket on write.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= WRITE LPAR ExpressionList RPAR error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing semicolon at write.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= WRITE LPAR ExpressionList RPAR SEMICOLON 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= READ error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing opening bracket on read.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= READ LPAR error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getErrorLine() + "Missing variable on read.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= READ LPAR NameList error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
              for (int i = 0; i < arr.size(); i++)
              {
                  String name = (String)arr.get(i);
                  VarNode var = parser.symbolTable.getVar(name);
                 
                  if (var == null)
                  {
                      System.out.println(parser.getErrorLine() + "Variable " + name + " is not declared.");
                      parser.errNo++;
                  }
                  else
                      var.lastDef = parser.getLine();
              }
              System.out.println(parser.getErrorLine() + "Missing closing bracket on read.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= READ LPAR NameList RPAR error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
              for (int i = 0; i < arr.size(); i++)
              {
                  String name = (String)arr.get(i);
                  VarNode var = parser.symbolTable.getVar(name);
                 
                  if (var == null)
                  {
                      System.out.println(parser.getErrorLine() + "Variable " + name + " is not declared.");
                      parser.errNo++;
                  }
                  else
                      var.lastDef = parser.getLine();
              }
              System.out.println(parser.getErrorLine() + "Missing semicolon at read.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= READ LPAR NameList RPAR SEMICOLON 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
              for (int i = 0; i < arr.size(); i++)
              {
                  String name = (String)arr.get(i);
                  VarNode var = parser.symbolTable.getVar(name);
                 
                  if (var == null)
                  {
                      System.out.println(parser.getErrorLine() + "Variable " + name + " is not declared.");
                      parser.errNo++;
                  }
                  else
                      var.lastDef = parser.getLine();
              }
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ID ASSIGN error 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
              VarNode var = parser.symbolTable.getVar(name);
		      if (var == null)
		      {
                  System.out.println(parser.getErrorLine() + "Variable " + name + " is not declared.");
                  parser.errNo++;
		      }
		      else 
		          var.lastDef = parser.getLine();
              System.out.println(parser.getErrorLine() + "Invalid assignment expression.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= ID ASSIGN Expression error 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
              VarNode var = parser.symbolTable.getVar(name);
		      if (var == null)
		      {
                  System.out.println(parser.getErrorLine() + "Variable " + name + " is not declared.");
                  parser.errNo++;
		      }
		      else 
		      {
		          var.lastDef = parser.getLine();
		          if (var.type.typeKind != expr.typeKind)
		          {
		              System.out.println(parser.getErrorLine() + "Type mismatch in assignment");
		      	      parser.errNo++;
		          }
		      }
              System.out.println(parser.getErrorLine() + "Missing semicolon at assignment.");
              parser.errNo++;
            
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode expr = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
              VarNode var = parser.symbolTable.getVar(name);
		      if (var == null)
		      {
                  System.out.println(parser.getErrorLine() + "Variable " + name + " is not declared.");
                  parser.errNo++;
		      }
		      else 
		      {
		          var.lastDef = parser.getLine();
		          if (var.type.typeKind != expr.typeKind)
		          {
		              System.out.println(parser.getErrorLine() + "Incompatible types in assignment");
		      	      parser.errNo++;
		          }
		      }
		    
              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= Loop 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StatementList ::= Statement 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= BOOL 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("bool");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= REAL 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("real");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= CHAR 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("char");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= INT 
            {
              TypeNode RESULT = null;
		
         RESULT = parser.symbolTable.getType("int");
       
              CUP$MyParser$result = new java_cup.runtime.Symbol(10/*Type*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
             RESULT = new ArrayList();
             RESULT.add(name);
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NameList ::= NameList COMMA error 
            {
              ArrayList RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
             System.out.println(parser.getErrorLine() + "Missing identifier after comma.");
             parser.errNo++;
             RESULT = arr;
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).value;
		
             RESULT = arr;
             RESULT.add(name);
           
              CUP$MyParser$result = new java_cup.runtime.Symbol(17/*NameList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= NameList error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
            TypeNode t = parser.symbolTable.getType("unknown");
            for (int i = 0; i < arr.size(); i++)
            {
                String name = (String)arr.get(i);
               
                if (!parser.symbolTable.addVar(name, t))
                {
                    System.out.println(parser.getErrorLine() + "Variable " + name + " is already declared." );
                    parser.errNo++;
                }
            }
            System.out.println(parser.getErrorLine() + "Missing colon");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= NameList COLON error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		
            TypeNode t = parser.symbolTable.getType("unknown");
            for (int i = 0; i < arr.size(); i++)
            {
                String name = (String)arr.get(i);
               
                if (!parser.symbolTable.addVar(name, t))
                {
                    System.out.println(parser.getErrorLine() + "Variable " + name + " is already declared." );
                    parser.errNo++;
                }
            }
            System.out.println(parser.getErrorLine() + "Invalid type name.");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= NameList COLON Type error 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
            for (int i = 0; i < arr.size(); i++)
            {
                String name = (String)arr.get(i);
                
                if (!parser.symbolTable.addVar(name, t))
                {
                    System.out.println(parser.getErrorLine() + "Variable " + name + " is already declared." );
                    parser.errNo++;
                }
            }
            System.out.println(parser.getErrorLine() + "Missing semicolon");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= NameList COLON Type SEMICOLON 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ArrayList arr = (ArrayList)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		
            for (int i = 0; i < arr.size(); i++)
            {
                String name = (String)arr.get(i);
                
                if (!parser.symbolTable.addVar(name, t))
                {
                    System.out.println(parser.getErrorLine() + "Variable " + name + " is already declared." );
                    parser.errNo++;
                }
            }
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarList ::= error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getErrorLine() + "Invalid variable declaration.");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarList ::= VarDecl 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarList ::= VarList error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getErrorLine() + "Missing variable declaration.");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarList ::= VarList VarDecl 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(3/*VarList*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Block ::= LBPAR VarList StatementList RBPAR 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN LPAR RPAR error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getErrorLine() + "Missing block.");
            parser.errNo++;
          
              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LPAR RPAR Block 
            {
              Object RESULT = null;

              CUP$MyParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-0)).right, RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

